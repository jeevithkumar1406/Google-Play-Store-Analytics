{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "5884031e-e466-4802-ae6b-57a0eddf4f03",
   "metadata": {},
   "source": [
    "# Google Play Store Analytics  \n",
    "\n",
    "**Name:** Jeevith Kumar B  \n",
    "**Email:** jeevithkumar1406@gmail.com  \n",
    "**Title:** Google Play Store Analytics  \n",
    "**Duration:** 07-08-2025 to 07-09-2025  \n",
    "\n",
    "## Introduction  \n",
    "This project analyzes Google Play Store apps using Python. It studies app performance, reviews, and trends.\n",
    "An interactive dashboard is created with Plotly and HTML to display results.  \n",
    "\n",
    "## Objective  \n",
    "The objective is to create filtered, time-based visualizations for app analytics such as grouped bar chart,\n",
    "choropleth map, dual-axis chart, time series chart, and bubble chart. Each graph is shown only within specific IST time slots to provide\n",
    "focused and meaningful insights.  \n",
    "\n",
    "## Tools and Technologies  \n",
    "- **Task 1:** Grouped Bar Chart – Python, Pandas, Datetime, Pytz, Plotly Express, Dash/Streamlit  \n",
    "- **Task 2:** Choropleth Map – Python, Pandas, Numpy, Plotly, Dash/Streamlit  \n",
    "- **Task 3:** Dual-Axis Chart – Python, Pandas, Plotly Graph Objects, Dash  \n",
    "- **Task 4:** Time Series Chart – Python, Pandas, Datetime, Plotly, Translate API/Manual Mapping, Dash  \n",
    "- **Task 5:** Bubble Chart – Python, Pandas, Numpy, Plotly, NLTK/TextBlob, Dash  \n",
    "\n",
    "## Conclusion  \n",
    "This project shows how time-based and filtered visualizations can provide clear insights into app performance.\n",
    "With Python, Pandas, Plotly, and Dash, interactive dashboards were built to support accurate and effective decision-making in app analysis.  \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "1ff216ed-734b-4ce4-bb6e-3da54422c7f8",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[nltk_data] Downloading package vader_lexicon to\n",
      "[nltk_data]     C:\\Users\\jeevith\\AppData\\Roaming\\nltk_data...\n",
      "[nltk_data]   Package vader_lexicon is already up-to-date!\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# TRAINING PROJECT : 10 different plots\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import plotly.express as px\n",
    "import plotly.io as pio\n",
    "from nltk.sentiment.vader import SentimentIntensityAnalyzer\n",
    "import nltk\n",
    "import webbrowser\n",
    "import os\n",
    "\n",
    "nltk.download('vader_lexicon')\n",
    "\n",
    "# step1 : load datasets\n",
    "apps_df = pd.read_csv(r\"C:\\Users\\jeevith\\Downloads\\Play Store Data.csv\")\n",
    "reviews_df = pd.read_csv(r\"C:\\Users\\jeevith\\Downloads\\User Reviews.csv\")\n",
    "\n",
    "# Step 2: Data Cleaning\n",
    "apps_df = apps_df.dropna(subset=['Rating'])\n",
    "for column in apps_df.columns:\n",
    "    mode_val = apps_df[column].mode()[0]\n",
    "    apps_df[column] = apps_df[column].fillna(mode_val)\n",
    "apps_df.drop_duplicates(inplace=True)\n",
    "apps_df = apps_df[apps_df['Rating'] <= 5]\n",
    "reviews_df.dropna(subset=['Translated_Review'], inplace=True)\n",
    "\n",
    "# Merge datasets on 'App' and handle non-matching apps\n",
    "merged_df = pd.merge(apps_df, reviews_df, on='App', how='inner')\n",
    "\n",
    "# Step 3: Data Transformation\n",
    "apps_df['Reviews'] = apps_df['Reviews'].astype(int)\n",
    "apps_df['Installs'] = apps_df['Installs'].str.replace(r'[+,]', '', regex=True).astype(int)\n",
    "apps_df['Price'] = apps_df['Price'].str.replace('$', '').replace('Free', '0').astype(float)\n",
    "\n",
    "def convert_size(size):\n",
    "    if pd.isnull(size):\n",
    "        return np.nan\n",
    "    if 'M' in size:\n",
    "        return float(size.replace('M', ''))\n",
    "    elif 'k' in size:\n",
    "        return float(size.replace('k', '')) / 1024\n",
    "    else:\n",
    "        return np.nan\n",
    "apps_df['Size'] = apps_df['Size'].apply(convert_size)\n",
    "\n",
    "# Add log_installs and log_reviews columns\n",
    "apps_df['Log_Installs'] = np.log1p(apps_df['Installs'])\n",
    "apps_df['Log_Reviews'] = np.log1p(apps_df['Reviews'])\n",
    "\n",
    "# Add Rating Group column\n",
    "def rating_group(rating):\n",
    "    if rating >= 4:\n",
    "        return 'Top rated'\n",
    "    elif rating >= 3:\n",
    "        return 'Above average'\n",
    "    elif rating >= 2:\n",
    "        return 'Average'\n",
    "    else:\n",
    "        return 'Below average'\n",
    "apps_df['Rating_Group'] = apps_df['Rating'].apply(rating_group)\n",
    "\n",
    "# Add Revenue column\n",
    "apps_df['Revenue'] = apps_df['Price'] * apps_df['Installs']\n",
    "\n",
    "# Sentiment Analysis\n",
    "sia = SentimentIntensityAnalyzer()\n",
    "reviews_df['Sentiment_Score'] = reviews_df['Translated_Review'].apply(lambda x: sia.polarity_scores(str(x))['compound'])\n",
    "\n",
    "# Extract year from 'Last Updated' and create 'Year' column\n",
    "apps_df['Last Updated'] = pd.to_datetime(apps_df['Last Updated'], errors='coerce')\n",
    "apps_df['Year'] = apps_df['Last Updated'].dt.year\n",
    "\n",
    "# # Define the path for your HTML files and initialize container\n",
    "html_files_path = \"./\"\n",
    "os.makedirs(html_files_path, exist_ok=True)\n",
    "plot_containers = \"\"\n",
    "\n",
    "# Save plot function\n",
    "def save_plot_as_html(fig, filename, insight):\n",
    "    global plot_containers\n",
    "    filepath = os.path.join(html_files_path, filename)\n",
    "    html_content = pio.to_html(fig, full_html=False, include_plotlyjs='inline')\n",
    "    plot_containers += f\"\"\"\n",
    "    <div class=\"plot-container\" id=\"{filename}\" onclick=\"openPlot('{filename}')\">\n",
    "        <div class=\"plot\">{html_content}</div>\n",
    "        <div class=\"insights\">{insight}</div>\n",
    "    </div>\n",
    "    \"\"\"\n",
    "    fig.write_html(filepath, full_html=False, include_plotlyjs='inline')\n",
    "\n",
    "# Define plots\n",
    "plot_width = 400\n",
    "plot_height = 300\n",
    "plot_bg_color = 'black'\n",
    "text_color = 'white'\n",
    "title_font = {'size': 16}\n",
    "axis_font = {'size': 12}\n",
    "\n",
    "# fig1 category axis plot\n",
    "category_counts = apps_df['Category'].value_counts().nlargest(10)\n",
    "fig1 = px.bar(\n",
    "    x=category_counts.index, y=category_counts.values,\n",
    "    labels={'x': 'Category', 'y': 'Count'},\n",
    "    title='Top Categories on Play Store',\n",
    "    color=category_counts.index,\n",
    "    color_discrete_sequence=px.colors.sequential.Plasma,\n",
    "    width=plot_width, height=plot_height\n",
    ")\n",
    "fig1.update_layout(\n",
    "    plot_bgcolor=plot_bg_color, paper_bgcolor=plot_bg_color,\n",
    "    font_color=text_color, title_font=title_font,\n",
    "    xaxis=dict(title_font=axis_font),\n",
    "    yaxis=dict(title_font=axis_font),\n",
    "    margin=dict(l=10, r=10, t=30, b=10)\n",
    ")\n",
    "fig1.update_traces(marker=dict(line=dict(color=text_color, width=1)))\n",
    "save_plot_as_html(fig1, \"category_analysis.html\", \"The top categories on the Play Store are dominated by tools, entertainment, and productivity apps.This suggests users are looking for apps that either provide utility or offer leisure activities.\")\n",
    "\n",
    "# fig2 Type analysis plot\n",
    "type_counts = apps_df['Type'].value_counts()\n",
    "fig2 = px.pie(\n",
    "    values=type_counts.values, names=type_counts.index,\n",
    "    title='App Type Distribution',\n",
    "    color_discrete_sequence=px.colors.sequential.RdBu,\n",
    "    width=plot_width, height=plot_height\n",
    ")\n",
    "fig2.update_traces(textposition='inside', textinfo='percent+label')\n",
    "fig2.update_layout(\n",
    "    plot_bgcolor=plot_bg_color, paper_bgcolor=plot_bg_color,\n",
    "    font_color=text_color, title_font=title_font,\n",
    "    margin=dict(l=10, r=10, t=30, b=10)\n",
    ")\n",
    "save_plot_as_html(fig2, \"type_analysis.html\", \"Most apps on the Play Store are free, indicating a strategy to attract users first and monetize through ads or in-app purchases.\")\n",
    "\n",
    "# fig3 Rating distribution plot\n",
    "fig3 = px.histogram(\n",
    "    apps_df, x='Rating', nbins=20, title='Rating Distribution',\n",
    "    color_discrete_sequence=['#636EFA'], width=plot_width, height=plot_height\n",
    ")\n",
    "fig3.update_layout(\n",
    "    plot_bgcolor=plot_bg_color, paper_bgcolor=plot_bg_color,\n",
    "    font_color=text_color, title_font=title_font,\n",
    "    xaxis=dict(title_font=axis_font), yaxis=dict(title_font=axis_font),\n",
    "    margin=dict(l=10, r=10, t=30, b=10)\n",
    ")\n",
    "save_plot_as_html(fig3, \"rating_distribution.html\", \"Ratings are skewed towards higher values, suggesting that most apps are rated favorably by users.\")\n",
    "\n",
    "# fig4 Sentiment Distribution\n",
    "sentiment_counts = reviews_df['Sentiment_Score'].round(1).value_counts().sort_index()\n",
    "fig4 = px.bar(\n",
    "    x=sentiment_counts.index, y=sentiment_counts.values,\n",
    "    labels={'x': 'Sentiment Score', 'y': 'Count'},\n",
    "    title='Sentiment Distribution',\n",
    "    color=sentiment_counts.index, color_discrete_sequence=px.colors.sequential.RdPu,\n",
    "    width=plot_width, height=plot_height\n",
    ")\n",
    "fig4.update_layout(\n",
    "    plot_bgcolor=plot_bg_color, paper_bgcolor=plot_bg_color,\n",
    "    font_color=text_color, title_font=title_font,\n",
    "    xaxis=dict(title_font=axis_font), yaxis=dict(title_font=axis_font),\n",
    "    margin=dict(l=10, r=10, t=30, b=10)\n",
    ")\n",
    "fig4.update_traces(marker=dict(line=dict(color=text_color, width=1)))\n",
    "save_plot_as_html(fig4, \"sentiment_distribution.html\", \"Sentiments in reviews show a mix of positive and negative feedback, with a slight lean towards positive sentiments.\")\n",
    "\n",
    "#fig5 Installs by Category plot\n",
    "installs_by_category = apps_df.groupby('Category')['Installs'].sum().nlargest(10)\n",
    "fig5 = px.bar(\n",
    "    x=installs_by_category.values, y=installs_by_category.index,\n",
    "    orientation='h', labels={'x': 'Installs', 'y': 'Category'},\n",
    "    title='Installs by Category',\n",
    "    color=installs_by_category.index,\n",
    "    color_discrete_sequence=px.colors.sequential.Blues,\n",
    "    width=plot_width, height=plot_height\n",
    ")\n",
    "fig5.update_layout(\n",
    "    plot_bgcolor=plot_bg_color, paper_bgcolor=plot_bg_color,\n",
    "    font_color=text_color, title_font=title_font,\n",
    "    margin=dict(l=10, r=10, t=30, b=10)\n",
    ")\n",
    "fig5.update_traces(marker=dict(line=dict(color=text_color, width=1)))\n",
    "save_plot_as_html(fig5, \"installs_by_category.html\", \"The categories with the most installs are social and communication apps, which reflects their broad appeal and daily usage.\")\n",
    "\n",
    "# fig6  Updates Per Year Plot\n",
    "updates_per_year = apps_df['Year'].value_counts().sort_index()\n",
    "fig6 = px.line(\n",
    "    x=updates_per_year.index, y=updates_per_year.values,\n",
    "    labels={'x': 'Year', 'y': 'Number of Updates'},\n",
    "    title='Number of Updates Over the Years',\n",
    "    color_discrete_sequence=['#AB63FA'],\n",
    "    width=plot_width, height=plot_height\n",
    ")\n",
    "fig6.update_layout(\n",
    "    plot_bgcolor=plot_bg_color, paper_bgcolor=plot_bg_color,\n",
    "    font_color=text_color, title_font=title_font,\n",
    "    margin=dict(l=10, r=10, t=30, b=10)\n",
    ")\n",
    "save_plot_as_html(fig6, \"updates_per_year.html\", \"Updates have been increasing over the years, showing that developers are actively maintaining and improving their apps.\")\n",
    "\n",
    "# fig7 Revenue by Category \n",
    "revenue_by_category = apps_df.groupby('Category')['Revenue'].sum().nlargest(10)\n",
    "fig7 = px.bar(\n",
    "    x=revenue_by_category.index, y=revenue_by_category.values,\n",
    "    labels={'x': 'Category', 'y': 'Revenue'},\n",
    "    title='Revenue by Category',\n",
    "    color=revenue_by_category.index,\n",
    "    color_discrete_sequence=px.colors.sequential.Greens,\n",
    "    width=plot_width, height=plot_height\n",
    ")\n",
    "fig7.update_layout(\n",
    "    plot_bgcolor=plot_bg_color, paper_bgcolor=plot_bg_color,\n",
    "    font_color=text_color, title_font=title_font,\n",
    "    margin=dict(l=10, r=10, t=30, b=10)\n",
    ")\n",
    "fig7.update_traces(marker=dict(line=dict(color=text_color, width=1)))\n",
    "save_plot_as_html(fig7, \"revenue_by_category.html\", \"Categories such as Business and Productivity lead in revenue generation, indicating their monetization potential.\")\n",
    "\n",
    "# fig8 Genre Count plot\n",
    "genre_counts = apps_df['Genres'].str.split(';', expand=True).stack().value_counts().nlargest(10)\n",
    "fig8 = px.bar(\n",
    "    x=genre_counts.index, y=genre_counts.values,\n",
    "    labels={'x': 'Genre', 'y': 'Count'},\n",
    "    title='Top Genres',\n",
    "    color=genre_counts.index,\n",
    "    color_discrete_sequence=px.colors.sequential.OrRd,\n",
    "    width=plot_width, height=plot_height\n",
    ")\n",
    "fig8.update_layout(\n",
    "    plot_bgcolor=plot_bg_color, paper_bgcolor=plot_bg_color,\n",
    "    font_color=text_color, title_font=title_font,\n",
    "    margin=dict(l=10, r=10, t=30, b=10)\n",
    ")\n",
    "fig8.update_traces(marker=dict(line=dict(color=text_color, width=1)))\n",
    "save_plot_as_html(fig8, \"genres_counts.html\", \"Action and Casual genres are the most common, reflecting users' preference for engaging and easy-to-play games.\")\n",
    "\n",
    "# fig9  Impact of Last Update on Rating\n",
    "fig9 = px.scatter(\n",
    "    apps_df, x='Last Updated', y='Rating', color='Type',\n",
    "    title='Impact of Last Update on Rating',\n",
    "    color_discrete_sequence=px.colors.qualitative.Vivid,\n",
    "    width=plot_width, height=plot_height\n",
    ")\n",
    "fig9.update_layout(\n",
    "    plot_bgcolor=plot_bg_color, paper_bgcolor=plot_bg_color,\n",
    "    font_color=text_color, title_font=title_font,\n",
    "    margin=dict(l=10, r=10, t=30, b=10)\n",
    ")\n",
    "save_plot_as_html(fig9, \"update_on_rating.html\", \"The scatter plot shows a weak correlation between the last update date and ratings, suggesting that more frequent updates don't always result in better ratings.\")\n",
    "\n",
    "#fig10 Ratings for Paid vs Free Apps\n",
    "fig10 = px.box(\n",
    "    apps_df, x='Type', y='Rating', color='Type',\n",
    "    title='Ratings for Paid vs Free Apps',\n",
    "    color_discrete_sequence=px.colors.qualitative.Pastel,\n",
    "    width=plot_width, height=plot_height\n",
    ")\n",
    "fig10.update_layout(\n",
    "    plot_bgcolor=plot_bg_color, paper_bgcolor=plot_bg_color,\n",
    "    font_color=text_color, title_font=title_font,\n",
    "    margin=dict(l=10, r=10, t=30, b=10)\n",
    ")\n",
    "save_plot_as_html(fig10, \"ratings_paid_free.html\", \"Paid apps generally have higher ratings compared to free apps, suggesting that users expect higher quality from apps they pay for.\")\n",
    "\n",
    "# Split plot_containers to handle the last plot properly\n",
    "plot_containers_split = plot_containers.split('</div>')\n",
    "if len(plot_containers_split) > 1:\n",
    "    final_plot = plot_containers_split[-2] + '</div>'\n",
    "else:\n",
    "    final_plot = plot_containers  # Use plot_containers as default if splitting isn't sufficient   \n",
    "    \n",
    "# Build HTML Dashboard \n",
    "dashboard_html = \"\"\"\n",
    "<!DOCTYPE html>\n",
    "<html lang=\"en\">\n",
    "<head>\n",
    "    <meta charset=\"UTF-8\">\n",
    "    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n",
    "    <title>Google Play Store Reviews Analytics</title>\n",
    "    <style>\n",
    "        body {{\n",
    "            font-family: Arial, sans-serif;\n",
    "            background-color: #333;\n",
    "            color: #fff;\n",
    "            margin: 0;\n",
    "            padding: 0;\n",
    "        }}\n",
    "        .header {{\n",
    "            display: flex;\n",
    "            align-items: center;\n",
    "            justify-content: center;\n",
    "            padding: 20px;\n",
    "            background-color: #444;\n",
    "        }}\n",
    "        .header img {{\n",
    "            margin: 0 10px;\n",
    "            height: 50px;\n",
    "        }}\n",
    "        .container {{\n",
    "            display: flex;\n",
    "            flex-wrap: wrap;\n",
    "            justify-content: center;\n",
    "            padding: 20px;\n",
    "        }}\n",
    "        .plot-container {{\n",
    "            border: 2px solid #555;\n",
    "            margin: 10px;\n",
    "            padding: 10px;\n",
    "            width: 400px;\n",
    "            height: 300px;\n",
    "            overflow: hidden;\n",
    "            position: relative;\n",
    "            cursor: pointer;\n",
    "        }}\n",
    "        .insights {{\n",
    "            display: none;\n",
    "            position: absolute;\n",
    "            right: 10px;\n",
    "            top: 10px;\n",
    "            background-color: rgba(0, 0, 0, 0.7);\n",
    "            padding: 5px;\n",
    "            border-radius: 5px;\n",
    "            color: #fff;\n",
    "        }}\n",
    "        .plot-container:hover .insights {{\n",
    "            display: block;\n",
    "        }}\n",
    "    </style>\n",
    "    <script>\n",
    "        function openPlot(filename) {{\n",
    "            window.open(filename, '_blank');\n",
    "        }}\n",
    "    </script>\n",
    "</head>\n",
    "<body>\n",
    "    <div class=\"header\">\n",
    "        <img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/4/4a/Logo_2013_Google.png/800px-Logo_2013_Google.png\" alt=\"Google Logo\">\n",
    "        <h1>Google Play Store Reviews Analytics</h1>\n",
    "        <img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/7/78/Google_Play_Store_badge_EN.svg/1024px-Google_Play_Store_badge_EN.svg.png\" alt=\"Google Play Store Logo\">\n",
    "    </div>\n",
    "    <div class=\"container\">\n",
    "        {plots}\n",
    "    </div>\n",
    "</body>\n",
    "</html>\n",
    "\"\"\"\n",
    "# Save and open the dashboard\n",
    "final_html = dashboard_html.format(plots=plot_containers)\n",
    "dashboard_path = os.path.join(html_files_path, \"dashboard.html\")\n",
    "\n",
    "# Use these containers to fill in your dashboard HTML\n",
    "with open(dashboard_path, \"w\", encoding=\"utf-8\") as f:\n",
    "    f.write(final_html)\n",
    "    \n",
    "# Automatically open the generated HTML file in a web browser\n",
    "webbrowser.open('file://' + os.path.realpath(dashboard_path))\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "23cdeeba-2168-4675-84ac-771e4809161f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#task 1 -Use a grouped bar chart to compare the average rating and total review count for the top 10 app categories by number of installs.\n",
    "#Filter out any categories where the average rating is below 4.0 and size below 10 M and last update should be Jan month .\n",
    "#this graph should work only between 3PM IST to 5 PM IST apart from that time we should not show this graph in dashboard itself.\n",
    "\n",
    "import pandas as pd\n",
    "import plotly.express as px\n",
    "import os, webbrowser\n",
    "from datetime import datetime\n",
    "import pytz\n",
    "\n",
    "# --- Load data ---\n",
    "apps_df = pd.read_csv(r\"C:\\Users\\jeevith\\Downloads\\Play Store Data.csv\")\n",
    "\n",
    "# Convert size to MB\n",
    "def size_to_mb(size):\n",
    "    size = str(size).strip()\n",
    "    if \"M\" in size:\n",
    "        return float(size.replace(\"M\", \"\").strip())\n",
    "    elif \"k\" in size or \"K\" in size:\n",
    "        return float(size.replace(\"k\", \"\").replace(\"K\", \"\").strip()) / 1024\n",
    "    elif size.isdigit():\n",
    "        return float(size) / (1024 * 1024)\n",
    "    else:\n",
    "        return None\n",
    "\n",
    "apps_df[\"Size_MB\"] = apps_df[\"Size\"].apply(size_to_mb)\n",
    "\n",
    "# Clean installs\n",
    "apps_df[\"Installs\"] = (\n",
    "    apps_df[\"Installs\"]\n",
    "    .astype(str)\n",
    "    .str.replace(\"[+,]\", \"\", regex=True)\n",
    "    .str.strip()\n",
    ")\n",
    "apps_df[\"Installs\"] = pd.to_numeric(apps_df[\"Installs\"], errors=\"coerce\")\n",
    "\n",
    "# Clean reviews\n",
    "apps_df[\"Reviews\"] = pd.to_numeric(apps_df[\"Reviews\"], errors=\"coerce\")\n",
    "\n",
    "# Convert last updated\n",
    "apps_df[\"Last Updated\"] = pd.to_datetime(apps_df[\"Last Updated\"], errors=\"coerce\")\n",
    "\n",
    "# --- Apply filters ---\n",
    "filtered_df = apps_df[\n",
    "    (apps_df[\"Rating\"] >= 4.0) &\n",
    "    (apps_df[\"Size_MB\"] >= 10) &\n",
    "    (apps_df[\"Last Updated\"].dt.month == 1)\n",
    "]\n",
    "\n",
    "# Group by Category\n",
    "category_group = filtered_df.groupby(\"Category\").agg({\n",
    "    \"Rating\": \"mean\",\n",
    "    \"Reviews\": \"sum\",\n",
    "    \"Installs\": \"sum\"\n",
    "}).reset_index()\n",
    "\n",
    "# Top 10 categories by Installs\n",
    "top10 = category_group.sort_values(\"Installs\", ascending=False).head(10)\n",
    "\n",
    "# --- Create Grouped Bar Chart ---\n",
    "fig = px.bar(\n",
    "    top10,\n",
    "    x=\"Category\",\n",
    "    y=[\"Rating\", \"Reviews\"],\n",
    "    barmode=\"group\",\n",
    "    title=\"Top 10 App Categories (Avg Rating vs Total Reviews)\"\n",
    ")\n",
    "\n",
    "# Save chart as standalone HTML (fragment)\n",
    "plot_filename = \"top10_grouped_bar.html\"\n",
    "fig.write_html(plot_filename, include_plotlyjs=\"cdn\")\n",
    "\n",
    "# --- Dashboard HTML ---\n",
    "dashboard_html = \"\"\"\n",
    "<!DOCTYPE html>\n",
    "<html lang=\"en\">\n",
    "<head>\n",
    "    <meta charset=\"UTF-8\">\n",
    "    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n",
    "    <title>Google Play Store Reviews Analytics</title>\n",
    "    <style>\n",
    "        body {{\n",
    "            font-family: Arial, sans-serif;\n",
    "            background-color: #333;\n",
    "            color: #fff;\n",
    "            margin: 0;\n",
    "            padding: 0;\n",
    "        }}\n",
    "        .header {{\n",
    "            display: flex;\n",
    "            align-items: center;\n",
    "            justify-content: center;\n",
    "            padding: 20px;\n",
    "            background-color: #444;\n",
    "        }}\n",
    "        .header img {{\n",
    "            margin: 0 10px;\n",
    "            height: 50px;\n",
    "        }}\n",
    "        .container {{\n",
    "            display: flex;\n",
    "            flex-wrap: wrap;\n",
    "            justify-content: center;\n",
    "            padding: 20px;\n",
    "        }}\n",
    "        .plot-container {{\n",
    "            border: 2px solid #555;\n",
    "            margin: 10px;\n",
    "            padding: 10px;\n",
    "            width: 90%;\n",
    "            height: 500px;\n",
    "            overflow: hidden;\n",
    "            background-color: #222;\n",
    "        }}\n",
    "        iframe {{\n",
    "            width: 100%;\n",
    "            height: 100%;\n",
    "            border: none;\n",
    "        }}\n",
    "    </style>\n",
    "</head>\n",
    "<body>\n",
    "    <div class=\"header\">\n",
    "        <img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/4/4a/Logo_2013_Google.png/800px-Logo_2013_Google.png\" alt=\"Google Logo\">\n",
    "        <h1>Google Play Store Reviews Analytics</h1>\n",
    "        <img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/7/78/Google_Play_Store_badge_EN.svg/1024px-Google_Play_Store_badge_EN.svg.png\" alt=\"Google Play Store Logo\">\n",
    "    </div>\n",
    "    <div class=\"container\">\n",
    "        {plot_iframe}\n",
    "    </div>\n",
    "</body>\n",
    "</html>\n",
    "\"\"\"\n",
    "\n",
    "# --- Time Restriction (3–5 PM IST only) ---\n",
    "ist = pytz.timezone(\"Asia/Kolkata\")\n",
    "current_time = datetime.now(ist)\n",
    "\n",
    "if 15 <= current_time.hour < 17:\n",
    "    plot_iframe = f'<div class=\"plot-container\"><iframe src=\"{plot_filename}\"></iframe></div>'\n",
    "else:\n",
    "    plot_iframe = \"<h2 style='text-align:center;'>⏰ Graph available only between 3 PM – 5 PM IST</h2>\"\n",
    "\n",
    "final_html = dashboard_html.format(plot_iframe=plot_iframe)\n",
    "\n",
    "# Save dashboard\n",
    "dashboard_path = os.path.join(os.getcwd(), \"dashboard.html\")\n",
    "with open(dashboard_path, \"w\", encoding=\"utf-8\") as f:\n",
    "    f.write(final_html)\n",
    "\n",
    "# Open in browser\n",
    "webbrowser.open('file://' + os.path.realpath(dashboard_path))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "0d10edce-c3e3-473e-ad78-6a481a624c9e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "👉 Top 5 Categories Selected: ['PRODUCTIVITY', 'TOOLS', 'FAMILY', 'PHOTOGRAPHY', 'NEWS_AND_MAGAZINES']\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\jeevith\\AppData\\Local\\Temp\\ipykernel_9120\\4049451490.py:50: DeprecationWarning:\n",
      "\n",
      "The library used by the *country names* `locationmode` option is changing in an upcoming version. Country names in existing plots may not work in the new version. To ensure consistent behavior, consider setting `locationmode` to *ISO-3*.\n",
      "\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#task 2 - Create an interactive Choropleth map using Plotly to visualize global installs by Category.\n",
    "#Apply filters to show data for only the top 5 app categories and highlight category where the number of installs exceeds 1 million. \n",
    "#The app category should not start with the characters “A,” “C,” “G,” or “S.” \n",
    "#This graph should work only between 6 PM IST and 8 PM IST; apart from that time, we should not show it in the dashboard itself.\n",
    "\n",
    "import pandas as pd\n",
    "import plotly.express as px\n",
    "import os, webbrowser\n",
    "from datetime import datetime\n",
    "import pytz\n",
    "\n",
    "# --- Load Data ---\n",
    "apps_df = pd.read_csv(r\"C:\\Users\\jeevith\\Downloads\\Play Store Data.csv\")\n",
    "\n",
    "# Clean Installs column\n",
    "apps_df[\"Installs\"] = (\n",
    "    apps_df[\"Installs\"]\n",
    "    .astype(str)\n",
    "    .str.replace(\"[+,]\", \"\", regex=True)\n",
    "    .str.strip()\n",
    ")\n",
    "apps_df[\"Installs\"] = pd.to_numeric(apps_df[\"Installs\"], errors=\"coerce\")\n",
    "\n",
    "# Clean Reviews\n",
    "apps_df[\"Reviews\"] = pd.to_numeric(apps_df[\"Reviews\"], errors=\"coerce\")\n",
    "\n",
    "# --- Apply Filters ---\n",
    "# Exclude categories starting with A, C, G, S\n",
    "apps_df = apps_df[~apps_df[\"Category\"].str.startswith((\"A\", \"C\", \"G\", \"S\"))]\n",
    "\n",
    "# Group by Category\n",
    "category_group = apps_df.groupby(\"Category\").agg({\n",
    "    \"Installs\": \"sum\"\n",
    "}).reset_index()\n",
    "\n",
    "# Keep only installs > 1 million\n",
    "category_group = category_group[category_group[\"Installs\"] > 1_000_000]\n",
    "\n",
    "# Top 5 categories by installs\n",
    "top5 = category_group.sort_values(\"Installs\", ascending=False).head(5)\n",
    "\n",
    "print(\"👉 Top 5 Categories Selected:\", top5[\"Category\"].tolist())\n",
    "\n",
    "# --- Assign pseudo countries for visualization ---\n",
    "# (You can adjust mappings to actual countries if your dataset includes them)\n",
    "countries = [\"United States\", \"India\", \"Brazil\", \"Germany\", \"Australia\"]\n",
    "top5[\"Country\"] = countries[:len(top5)]\n",
    "\n",
    "# --- Create Choropleth Map ---\n",
    "fig = px.choropleth(\n",
    "    top5,\n",
    "    locations=\"Country\",\n",
    "    locationmode=\"country names\",\n",
    "    color=\"Installs\",\n",
    "    hover_name=\"Category\",\n",
    "    color_continuous_scale=\"Viridis\",\n",
    "    title=\"Global Installs by Top 5 App Categories\"\n",
    ")\n",
    "\n",
    "# Save chart as standalone HTML\n",
    "plot_filename = \"choropleth_map.html\"\n",
    "fig.write_html(plot_filename, include_plotlyjs=\"cdn\")\n",
    "\n",
    "# --- Dashboard HTML ---\n",
    "dashboard_html = \"\"\"\n",
    "<!DOCTYPE html>\n",
    "<html lang=\"en\">\n",
    "<head>\n",
    "    <meta charset=\"UTF-8\">\n",
    "    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n",
    "    <title>Google Play Store Analytics</title>\n",
    "    <style>\n",
    "        body {{\n",
    "            font-family: Arial, sans-serif;\n",
    "            background-color: #333;\n",
    "            color: #fff;\n",
    "            margin: 0;\n",
    "            padding: 0;\n",
    "        }}\n",
    "        .header {{\n",
    "            display: flex;\n",
    "            align-items: center;\n",
    "            justify-content: center;\n",
    "            padding: 20px;\n",
    "            background-color: #444;\n",
    "        }}\n",
    "        .header img {{\n",
    "            margin: 0 10px;\n",
    "            height: 50px;\n",
    "        }}\n",
    "        .container {{\n",
    "            display: flex;\n",
    "            flex-wrap: wrap;\n",
    "            justify-content: center;\n",
    "            padding: 20px;\n",
    "        }}\n",
    "        .plot-container {{\n",
    "            border: 2px solid #555;\n",
    "            margin: 10px;\n",
    "            padding: 10px;\n",
    "            width: 90%;\n",
    "            height: 600px;\n",
    "            overflow: hidden;\n",
    "            background-color: #222;\n",
    "        }}\n",
    "        iframe {{\n",
    "            width: 100%;\n",
    "            height: 100%;\n",
    "            border: none;\n",
    "        }}\n",
    "    </style>\n",
    "</head>\n",
    "<body>\n",
    "    <div class=\"header\">\n",
    "        <img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/4/4a/Logo_2013_Google.png/800px-Logo_2013_Google.png\" alt=\"Google Logo\">\n",
    "        <h1>Google Play Store Analytics</h1>\n",
    "        <img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/7/78/Google_Play_Store_badge_EN.svg/1024px-Google_Play_Store_badge_EN.svg.png\" alt=\"Google Play Store Logo\">\n",
    "    </div>\n",
    "    <div class=\"container\">\n",
    "        {plot_iframe}\n",
    "    </div>\n",
    "</body>\n",
    "</html>\n",
    "\"\"\"\n",
    "\n",
    "# --- Time Restriction (6–8 PM IST only) ---\n",
    "ist = pytz.timezone(\"Asia/Kolkata\")\n",
    "current_time = datetime.now(ist)\n",
    "\n",
    "if 18 <= current_time.hour < 20:\n",
    "    plot_iframe = f'<div class=\"plot-container\"><iframe src=\"{plot_filename}\"></iframe></div>'\n",
    "else:\n",
    "    plot_iframe = \"<h2 style='text-align:center;'>⏰ Graph available only between 6 PM – 8 PM IST</h2>\"\n",
    "\n",
    "final_html = dashboard_html.format(plot_iframe=plot_iframe)\n",
    "\n",
    "# Save dashboard\n",
    "dashboard_path = os.path.join(os.getcwd(), \"dashboard.html\")\n",
    "with open(dashboard_path, \"w\", encoding=\"utf-8\") as f:\n",
    "    f.write(final_html)\n",
    "\n",
    "# Open in browser\n",
    "webbrowser.open('file://' + os.path.realpath(dashboard_path))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "3106e775-07d3-4efc-9feb-b2fec2ab3d92",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "👉 Categories used: ['PHOTOGRAPHY', 'PERSONALIZATION', 'FAMILY']\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\jeevith\\AppData\\Local\\Temp\\ipykernel_9120\\3016117923.py:56: SettingWithCopyWarning:\n",
      "\n",
      "\n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#task 3-Create a dual-axis chart comparing the average installs and revenue for free vs. paid apps within the top 3 app categories.\n",
    "#Apply filters to exclude apps with fewer than 10,000 installs and revenue below $10,000 and android version should be more than 4.0 as well as size\n",
    "#should be more than 15M and content rating should be Everyone and app name should not have more than 30 characters including space and special character .\n",
    "#this graph should work only between 1 PM IST to 2 PM IST apart from that time we should not show this graph in dashboard itself.\n",
    "\n",
    "import pandas as pd\n",
    "import plotly.graph_objects as go\n",
    "import os, webbrowser\n",
    "from datetime import datetime\n",
    "import pytz\n",
    "\n",
    "# --- Load Data ---\n",
    "apps_df = pd.read_csv(r\"C:\\Users\\jeevith\\Downloads\\Play Store Data.csv\")\n",
    "\n",
    "# --- Data Cleaning ---\n",
    "# Clean Installs\n",
    "apps_df[\"Installs\"] = (\n",
    "    apps_df[\"Installs\"]\n",
    "    .astype(str)\n",
    "    .str.replace(\"[+,]\", \"\", regex=True)\n",
    "    .str.strip()\n",
    ")\n",
    "apps_df[\"Installs\"] = pd.to_numeric(apps_df[\"Installs\"], errors=\"coerce\")\n",
    "\n",
    "# Clean Size\n",
    "def size_to_mb(size):\n",
    "    if \"M\" in str(size):\n",
    "        return float(str(size).replace(\"M\", \"\"))\n",
    "    elif \"k\" in str(size):\n",
    "        return float(str(size).replace(\"k\", \"\")) / 1024\n",
    "    elif size == \"Varies with device\":\n",
    "        return None\n",
    "    else:\n",
    "        return None\n",
    "\n",
    "apps_df[\"Size_MB\"] = apps_df[\"Size\"].apply(size_to_mb)\n",
    "\n",
    "# Clean Price\n",
    "apps_df[\"Price\"] = apps_df[\"Price\"].astype(str).str.replace(\"$\", \"\", regex=False)\n",
    "apps_df[\"Price\"] = pd.to_numeric(apps_df[\"Price\"], errors=\"coerce\").fillna(0)\n",
    "\n",
    "# --- Revenue Column ---\n",
    "apps_df[\"Revenue\"] = apps_df[\"Price\"] * apps_df[\"Installs\"]\n",
    "\n",
    "# --- Apply Filters ---\n",
    "filtered_df = apps_df[\n",
    "    (apps_df[\"Installs\"] >= 10000) &\n",
    "    (apps_df[\"Revenue\"] >= 10000) &\n",
    "    (pd.to_numeric(apps_df[\"Android Ver\"].str.extract(r'(\\d+\\.\\d+)')[0], errors=\"coerce\") > 4.0) &\n",
    "    (apps_df[\"Size_MB\"] > 15) &\n",
    "    (apps_df[\"Content Rating\"] == \"Everyone\") &\n",
    "    (apps_df[\"App\"].str.len() <= 30)  # app name length ≤ 30 chars\n",
    "]\n",
    "\n",
    "# --- Grouping: Free vs Paid in Top 3 Categories ---\n",
    "filtered_df[\"Type\"] = filtered_df[\"Type\"].fillna(\"Free\")\n",
    "\n",
    "category_group = (\n",
    "    filtered_df.groupby([\"Category\", \"Type\"])\n",
    "    .agg({\"Installs\": \"mean\", \"Revenue\": \"mean\"})\n",
    "    .reset_index()\n",
    ")\n",
    "\n",
    "# Pick top 3 categories by installs\n",
    "top3_categories = (\n",
    "    category_group.groupby(\"Category\")[\"Installs\"]\n",
    "    .sum()\n",
    "    .sort_values(ascending=False)\n",
    "    .head(3)\n",
    "    .index\n",
    ")\n",
    "\n",
    "top3_df = category_group[category_group[\"Category\"].isin(top3_categories)]\n",
    "\n",
    "print(\"👉 Categories used:\", top3_categories.tolist())\n",
    "\n",
    "# --- Dual-Axis Chart ---\n",
    "fig = go.Figure()\n",
    "\n",
    "# Bar for Average Installs\n",
    "fig.add_trace(\n",
    "    go.Bar(\n",
    "        x=top3_df[\"Category\"] + \" - \" + top3_df[\"Type\"],\n",
    "        y=top3_df[\"Installs\"],\n",
    "        name=\"Average Installs\",\n",
    "        marker_color=\"steelblue\",\n",
    "        yaxis=\"y1\"\n",
    "    )\n",
    ")\n",
    "\n",
    "# Line for Revenue\n",
    "fig.add_trace(\n",
    "    go.Scatter(\n",
    "        x=top3_df[\"Category\"] + \" - \" + top3_df[\"Type\"],\n",
    "        y=top3_df[\"Revenue\"],\n",
    "        name=\"Average Revenue\",\n",
    "        mode=\"lines+markers\",\n",
    "        marker=dict(color=\"orange\", size=10),\n",
    "        line=dict(width=3),\n",
    "        yaxis=\"y2\"\n",
    "    )\n",
    ")\n",
    "\n",
    "# Layout\n",
    "fig.update_layout(\n",
    "    title=\"Dual-Axis: Installs vs Revenue (Free vs Paid, Top 3 Categories)\",\n",
    "    xaxis=dict(title=\"Category - App Type\"),\n",
    "    yaxis=dict(title=\"Average Installs\", side=\"left\"),\n",
    "    yaxis2=dict(title=\"Average Revenue ($)\", overlaying=\"y\", side=\"right\"),\n",
    "    legend=dict(x=0.5, y=-0.2, orientation=\"h\"),\n",
    "    barmode=\"group\",\n",
    "    plot_bgcolor=\"white\"\n",
    ")\n",
    "\n",
    "# Save chart as standalone HTML\n",
    "plot_filename = \"dual_axis_chart.html\"\n",
    "fig.write_html(plot_filename, include_plotlyjs=\"cdn\")\n",
    "\n",
    "# --- Dashboard HTML ---\n",
    "dashboard_html = \"\"\"\n",
    "<!DOCTYPE html>\n",
    "<html lang=\"en\">\n",
    "<head>\n",
    "    <meta charset=\"UTF-8\">\n",
    "    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n",
    "    <title>Google Play Store Analytics</title>\n",
    "    <style>\n",
    "        body {{\n",
    "            font-family: Arial, sans-serif;\n",
    "            background-color: #f4f4f9;\n",
    "            color: #333;\n",
    "            margin: 0;\n",
    "            padding: 0;\n",
    "        }}\n",
    "        .header {{\n",
    "            display: flex;\n",
    "            align-items: center;\n",
    "            justify-content: center;\n",
    "            padding: 20px;\n",
    "            background-color: #2c3e50;\n",
    "            color: white;\n",
    "        }}\n",
    "        .header img {{\n",
    "            margin: 0 10px;\n",
    "            height: 50px;\n",
    "        }}\n",
    "        .container {{\n",
    "            display: flex;\n",
    "            flex-wrap: wrap;\n",
    "            justify-content: center;\n",
    "            padding: 20px;\n",
    "        }}\n",
    "        .plot-container {{\n",
    "            border: 2px solid #ddd;\n",
    "            margin: 10px;\n",
    "            padding: 10px;\n",
    "            width: 90%;\n",
    "            height: 600px;\n",
    "            overflow: hidden;\n",
    "            background-color: #fff;\n",
    "            border-radius: 12px;\n",
    "            box-shadow: 0px 4px 10px rgba(0,0,0,0.1);\n",
    "        }}\n",
    "        iframe {{\n",
    "            width: 100%;\n",
    "            height: 100%;\n",
    "            border: none;\n",
    "        }}\n",
    "    </style>\n",
    "</head>\n",
    "<body>\n",
    "    <div class=\"header\">\n",
    "        <img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/4/4a/Logo_2013_Google.png/800px-Logo_2013_Google.png\" alt=\"Google Logo\">\n",
    "        <h1>Google Play Store Analytics</h1>\n",
    "        <img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/7/78/Google_Play_Store_badge_EN.svg/1024px-Google_Play_Store_badge_EN.svg.png\" alt=\"Google Play Store Logo\">\n",
    "    </div>\n",
    "    <div class=\"container\">\n",
    "        {plot_iframe}\n",
    "    </div>\n",
    "</body>\n",
    "</html>\n",
    "\"\"\"\n",
    "\n",
    "# --- Time Restriction (1–2 PM IST only) ---\n",
    "ist = pytz.timezone(\"Asia/Kolkata\")\n",
    "current_time = datetime.now(ist)\n",
    "\n",
    "if 13 <= current_time.hour < 14:\n",
    "    plot_iframe = f'<div class=\"plot-container\"><iframe src=\"{plot_filename}\"></iframe></div>'\n",
    "else:\n",
    "    plot_iframe = \"<h2 style='text-align:center;'>⏰ Graph available only between 1 PM – 2 PM IST</h2>\"\n",
    "\n",
    "final_html = dashboard_html.format(plot_iframe=plot_iframe)\n",
    "\n",
    "# Save dashboard\n",
    "dashboard_path = os.path.join(os.getcwd(), \"dashboard_dual_axis.html\")\n",
    "with open(dashboard_path, \"w\", encoding=\"utf-8\") as f:\n",
    "    f.write(final_html)\n",
    "\n",
    "# Open in browser\n",
    "webbrowser.open('file://' + os.path.realpath(dashboard_path))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "d51a566a-4115-4f0e-bd26-01abeb5733cf",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#task 4 -Plot a time series line chart to show the trend of total installs over time, segmented by app category.\n",
    "#Highlight periods of significant growth by shading the areas under the curve where the increase in installs exceeds 20% month-over-month \n",
    "#and app name should not starts with x, y ,z and app category should start with letter \" E \" or \" C \" or \" B \" and We have to translate the\n",
    "#Beauty category in Hindi and Business category in Tamil and Dating category in German while showing it on Graph. reviews should be more than 500 the app name should not contain letter \"S\" as well as this graph should work only between 6 PM IST to 9 PM IST apart from that time we should not show this graph in dashboard itself\n",
    "\n",
    "import pandas as pd\n",
    "import plotly.graph_objects as go\n",
    "import os, webbrowser\n",
    "from datetime import datetime\n",
    "import pytz\n",
    "\n",
    "# --- Load Data ---\n",
    "apps_df = pd.read_csv(r\"C:\\Users\\jeevith\\Downloads\\Play Store Data.csv\")\n",
    "\n",
    "# --- Data Cleaning ---\n",
    "# Clean Installs\n",
    "apps_df[\"Installs\"] = (\n",
    "    apps_df[\"Installs\"]\n",
    "    .astype(str)\n",
    "    .str.replace(\"[+,]\", \"\", regex=True)\n",
    "    .str.strip()\n",
    ")\n",
    "apps_df[\"Installs\"] = pd.to_numeric(apps_df[\"Installs\"], errors=\"coerce\")\n",
    "\n",
    "# Clean Reviews\n",
    "apps_df[\"Reviews\"] = pd.to_numeric(apps_df[\"Reviews\"], errors=\"coerce\")\n",
    "\n",
    "# Convert Last Updated to datetime\n",
    "apps_df[\"Last Updated\"] = pd.to_datetime(apps_df[\"Last Updated\"], errors=\"coerce\")\n",
    "\n",
    "# --- Apply Filters ---\n",
    "filtered_df = apps_df[\n",
    "    (apps_df[\"Reviews\"] > 500) &\n",
    "    (~apps_df[\"App\"].str.startswith((\"x\", \"y\", \"z\", \"X\", \"Y\", \"Z\"))) &\n",
    "    (~apps_df[\"App\"].str.contains(\"S\", case=False, na=False)) &\n",
    "    (apps_df[\"Category\"].str.startswith((\"E\", \"C\", \"B\")))\n",
    "].copy()\n",
    "\n",
    "# --- Translate Categories ---\n",
    "translations = {\n",
    "    \"BEAUTY\": \"सौंदर्य\",        # Hindi\n",
    "    \"BUSINESS\": \"வணிகம்\",      # Tamil\n",
    "    \"DATING\": \"Dating (Deutsch)\"  # German\n",
    "}\n",
    "\n",
    "filtered_df[\"Category\"] = filtered_df[\"Category\"].replace(translations)\n",
    "\n",
    "# --- Prepare Monthly Data ---\n",
    "filtered_df[\"YearMonth\"] = filtered_df[\"Last Updated\"].dt.to_period(\"M\")\n",
    "monthly_installs = (\n",
    "    filtered_df.groupby([\"YearMonth\", \"Category\"])[\"Installs\"]\n",
    "    .sum()\n",
    "    .reset_index()\n",
    ")\n",
    "monthly_installs[\"YearMonth\"] = monthly_installs[\"YearMonth\"].astype(str)\n",
    "\n",
    "# --- Calculate MoM Growth ---\n",
    "monthly_installs[\"Prev_Installs\"] = monthly_installs.groupby(\"Category\")[\"Installs\"].shift(1)\n",
    "monthly_installs[\"Growth\"] = (\n",
    "    (monthly_installs[\"Installs\"] - monthly_installs[\"Prev_Installs\"]) /\n",
    "    monthly_installs[\"Prev_Installs\"]\n",
    ") * 100\n",
    "\n",
    "# --- Plot Time Series ---\n",
    "fig = go.Figure()\n",
    "\n",
    "categories = monthly_installs[\"Category\"].unique()\n",
    "\n",
    "for cat in categories:\n",
    "    cat_data = monthly_installs[monthly_installs[\"Category\"] == cat]\n",
    "    \n",
    "    # Line plot\n",
    "    fig.add_trace(\n",
    "        go.Scatter(\n",
    "            x=cat_data[\"YearMonth\"],\n",
    "            y=cat_data[\"Installs\"],\n",
    "            mode=\"lines+markers\",\n",
    "            name=cat\n",
    "        )\n",
    "    )\n",
    "    \n",
    "    # Highlight growth > 20%\n",
    "    highlight = cat_data[cat_data[\"Growth\"] > 20]\n",
    "    fig.add_trace(\n",
    "        go.Scatter(\n",
    "            x=highlight[\"YearMonth\"],\n",
    "            y=highlight[\"Installs\"],\n",
    "            mode=\"lines\",\n",
    "            line=dict(width=0),\n",
    "            showlegend=False,\n",
    "            fill=\"tozeroy\",\n",
    "            fillcolor=\"rgba(255, 165, 0, 0.3)\"  # orange shade\n",
    "        )\n",
    "    )\n",
    "\n",
    "# Layout\n",
    "fig.update_layout(\n",
    "    title=\"Time Series of Installs by Category (with >20% Growth Highlighted)\",\n",
    "    xaxis_title=\"Month\",\n",
    "    yaxis_title=\"Total Installs\",\n",
    "    plot_bgcolor=\"white\",\n",
    "    legend=dict(x=0.5, y=-0.2, orientation=\"h\")\n",
    ")\n",
    "\n",
    "# Save chart\n",
    "plot_filename = \"time_series_installs.html\"\n",
    "fig.write_html(plot_filename, include_plotlyjs=\"cdn\")\n",
    "\n",
    "# --- Dashboard HTML ---\n",
    "dashboard_html = \"\"\"\n",
    "<!DOCTYPE html>\n",
    "<html lang=\"en\">\n",
    "<head>\n",
    "    <meta charset=\"UTF-8\">\n",
    "    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n",
    "    <title>Google Play Store Analytics</title>\n",
    "    <style>\n",
    "        body {{\n",
    "            font-family: Arial, sans-serif;\n",
    "            background-color: #f4f4f9;\n",
    "            color: #333;\n",
    "            margin: 0;\n",
    "            padding: 0;\n",
    "        }}\n",
    "        .header {{\n",
    "            display: flex;\n",
    "            align-items: center;\n",
    "            justify-content: center;\n",
    "            padding: 20px;\n",
    "            background-color: #2c3e50;\n",
    "            color: white;\n",
    "        }}\n",
    "        .header img {{\n",
    "            margin: 0 10px;\n",
    "            height: 50px;\n",
    "        }}\n",
    "        .container {{\n",
    "            display: flex;\n",
    "            flex-wrap: wrap;\n",
    "            justify-content: center;\n",
    "            padding: 20px;\n",
    "        }}\n",
    "        .plot-container {{\n",
    "            border: 2px solid #ddd;\n",
    "            margin: 10px;\n",
    "            padding: 10px;\n",
    "            width: 95%;\n",
    "            height: 600px;\n",
    "            overflow: hidden;\n",
    "            background-color: #fff;\n",
    "            border-radius: 12px;\n",
    "            box-shadow: 0px 4px 10px rgba(0,0,0,0.1);\n",
    "        }}\n",
    "        iframe {{\n",
    "            width: 100%;\n",
    "            height: 100%;\n",
    "            border: none;\n",
    "        }}\n",
    "    </style>\n",
    "</head>\n",
    "<body>\n",
    "    <div class=\"header\">\n",
    "        <img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/4/4a/Logo_2013_Google.png/800px-Logo_2013_Google.png\" alt=\"Google Logo\">\n",
    "        <h1>Google Play Store Analytics</h1>\n",
    "        <img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/7/78/Google_Play_Store_badge_EN.svg/1024px-Google_Play_Store_badge_EN.svg.png\" alt=\"Google Play Store Logo\">\n",
    "    </div>\n",
    "    <div class=\"container\">\n",
    "        {plot_iframe}\n",
    "    </div>\n",
    "</body>\n",
    "</html>\n",
    "\"\"\"\n",
    "\n",
    "# --- Time Restriction (6–9 PM IST only) ---\n",
    "ist = pytz.timezone(\"Asia/Kolkata\")\n",
    "current_time = datetime.now(ist)\n",
    "\n",
    "if 18 <= current_time.hour < 21:\n",
    "    plot_iframe = f'<div class=\"plot-container\"><iframe src=\"{plot_filename}\"></iframe></div>'\n",
    "else:\n",
    "    plot_iframe = \"<h2 style='text-align:center;'>⏰ Graph available only between 6 PM – 9 PM IST</h2>\"\n",
    "\n",
    "final_html = dashboard_html.format(plot_iframe=plot_iframe)\n",
    "\n",
    "# Save dashboard\n",
    "dashboard_path = os.path.join(os.getcwd(), \"dashboard_time_series.html\")\n",
    "with open(dashboard_path, \"w\", encoding=\"utf-8\") as f:\n",
    "    f.write(final_html)\n",
    "\n",
    "# Open in browser\n",
    "webbrowser.open('file://' + os.path.realpath(dashboard_path))\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "77ab5f9f-0755-469b-9343-f5f5ec739dcb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#task 5 - Plot a bubble chart to analyze the relationship between app size (in MB) and average rating,\n",
    "#with the bubble size representing the number of installs. Include a filter to show only apps with a rating higher than 3.5 and \n",
    "#that belong to the Game, Beauty ,business , commics , commication , Dating , Entertainment , social and event categories.\n",
    "#Reviews should be greater than 500 and the app name should not contain letter \"S\" and sentiment subjectivity should be more than 0.5 \n",
    "#and highlight the Game Category chart in Pink color. We have to translate the Beauty category in Hindi and \n",
    "#Business category in Tamil and Dating category in German while showing it on Graphs. Installs should be more than 50k as well as this graph \n",
    "#should work only between 5 PM IST to 7 PM IST apart from that time we should not show this graph in dashboard itself.\n",
    "\n",
    "import pandas as pd\n",
    "import plotly.express as px\n",
    "import os, webbrowser\n",
    "from datetime import datetime\n",
    "import pytz\n",
    "\n",
    "# --- Load Data ---\n",
    "apps_df = pd.read_csv(r\"C:\\Users\\jeevith\\Downloads\\Play Store Data.csv\")\n",
    "reviews_df = pd.read_csv(r\"C:\\Users\\jeevith\\Downloads\\User Reviews.csv\")\n",
    "\n",
    "# --- Data Cleaning ---\n",
    "# Convert Installs\n",
    "apps_df[\"Installs\"] = (\n",
    "    apps_df[\"Installs\"].astype(str)\n",
    "    .str.replace(\"[+,]\", \"\", regex=True)\n",
    "    .str.strip()\n",
    ")\n",
    "apps_df[\"Installs\"] = pd.to_numeric(apps_df[\"Installs\"], errors=\"coerce\")\n",
    "\n",
    "# Convert Reviews\n",
    "apps_df[\"Reviews\"] = pd.to_numeric(apps_df[\"Reviews\"], errors=\"coerce\")\n",
    "\n",
    "# Convert Size to MB\n",
    "def size_to_mb(size):\n",
    "    size = str(size).strip()\n",
    "    if \"M\" in size:\n",
    "        return float(size.replace(\"M\", \"\"))\n",
    "    elif \"k\" in size or \"K\" in size:\n",
    "        return float(size.replace(\"k\", \"\").replace(\"K\", \"\")) / 1024\n",
    "    elif \"G\" in size:\n",
    "        return float(size.replace(\"G\", \"\")) * 1024\n",
    "    else:\n",
    "        return None\n",
    "\n",
    "apps_df[\"Size_MB\"] = apps_df[\"Size\"].apply(size_to_mb)\n",
    "\n",
    "# --- Merge with sentiment data ---\n",
    "reviews_df = reviews_df.dropna(subset=[\"Sentiment_Subjectivity\"])\n",
    "apps_df = apps_df.merge(\n",
    "    reviews_df.groupby(\"App\")[\"Sentiment_Subjectivity\"].mean().reset_index(),\n",
    "    on=\"App\",\n",
    "    how=\"left\"\n",
    ")\n",
    "\n",
    "# --- Apply Filters ---\n",
    "categories_allowed = [\"GAME\", \"BEAUTY\", \"BUSINESS\", \"COMICS\", \"COMMUNICATION\",\n",
    "                      \"DATING\", \"ENTERTAINMENT\", \"SOCIAL\", \"EVENT\"]\n",
    "\n",
    "filtered_df = apps_df[\n",
    "    (apps_df[\"Rating\"] > 3.5) &\n",
    "    (apps_df[\"Reviews\"] > 500) &\n",
    "    (~apps_df[\"App\"].str.contains(\"S\", case=False, na=False)) &\n",
    "    (apps_df[\"Sentiment_Subjectivity\"] > 0.5) &\n",
    "    (apps_df[\"Category\"].isin(categories_allowed)) &\n",
    "    (apps_df[\"Installs\"] > 50000)\n",
    "].copy()\n",
    "\n",
    "# --- Translate Categories ---\n",
    "translations = {\n",
    "    \"BEAUTY\": \"सौंदर्य\",         # Hindi\n",
    "    \"BUSINESS\": \"வணிகம்\",       # Tamil\n",
    "    \"DATING\": \"Dating (Deutsch)\" # German\n",
    "}\n",
    "filtered_df[\"Category\"] = filtered_df[\"Category\"].replace(translations)\n",
    "\n",
    "# --- Bubble Chart ---\n",
    "fig = px.scatter(\n",
    "    filtered_df,\n",
    "    x=\"Size_MB\",\n",
    "    y=\"Rating\",\n",
    "    size=\"Installs\",\n",
    "    color=\"Category\",\n",
    "    hover_name=\"App\",\n",
    "    title=\"Bubble Chart: App Size vs Rating (Bubble size = Installs)\",\n",
    "    size_max=60\n",
    ")\n",
    "\n",
    "# Highlight \"GAME\" category in Pink\n",
    "fig.for_each_trace(\n",
    "    lambda t: t.update(marker=dict(color=\"pink\"))\n",
    "    if \"GAME\" in t.name else ()\n",
    ")\n",
    "\n",
    "fig.update_layout(\n",
    "    plot_bgcolor=\"white\",\n",
    "    xaxis_title=\"App Size (MB)\",\n",
    "    yaxis_title=\"Average Rating\",\n",
    "    legend_title=\"Category\",\n",
    ")\n",
    "\n",
    "# Save chart\n",
    "plot_filename = \"bubble_chart.html\"\n",
    "fig.write_html(plot_filename, include_plotlyjs=\"cdn\")\n",
    "\n",
    "# --- Dashboard HTML ---\n",
    "dashboard_html = \"\"\"\n",
    "<!DOCTYPE html>\n",
    "<html lang=\"en\">\n",
    "<head>\n",
    "    <meta charset=\"UTF-8\">\n",
    "    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n",
    "    <title>Google Play Store Analytics</title>\n",
    "    <style>\n",
    "        body {{\n",
    "            font-family: Arial, sans-serif;\n",
    "            background-color: #f4f4f9;\n",
    "            color: #333;\n",
    "            margin: 0;\n",
    "            padding: 0;\n",
    "        }}\n",
    "        .header {{\n",
    "            display: flex;\n",
    "            align-items: center;\n",
    "            justify-content: center;\n",
    "            padding: 20px;\n",
    "            background-color: #2c3e50;\n",
    "            color: white;\n",
    "        }}\n",
    "        .header img {{\n",
    "            margin: 0 10px;\n",
    "            height: 50px;\n",
    "        }}\n",
    "        .container {{\n",
    "            display: flex;\n",
    "            flex-wrap: wrap;\n",
    "            justify-content: center;\n",
    "            padding: 20px;\n",
    "        }}\n",
    "        .plot-container {{\n",
    "            border: 2px solid #ddd;\n",
    "            margin: 10px;\n",
    "            padding: 10px;\n",
    "            width: 95%;\n",
    "            height: 600px;\n",
    "            overflow: hidden;\n",
    "            background-color: #fff;\n",
    "            border-radius: 12px;\n",
    "            box-shadow: 0px 4px 10px rgba(0,0,0,0.1);\n",
    "        }}\n",
    "        iframe {{\n",
    "            width: 100%;\n",
    "            height: 100%;\n",
    "            border: none;\n",
    "        }}\n",
    "    </style>\n",
    "</head>\n",
    "<body>\n",
    "    <div class=\"header\">\n",
    "        <img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/4/4a/Logo_2013_Google.png/800px-Logo_2013_Google.png\" alt=\"Google Logo\">\n",
    "        <h1>Google Play Store Analytics</h1>\n",
    "        <img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/7/78/Google_Play_Store_badge_EN.svg/1024px-Google_Play_Store_badge_EN.svg.png\" alt=\"Google Play Store Logo\">\n",
    "    </div>\n",
    "    <div class=\"container\">\n",
    "        {plot_iframe}\n",
    "    </div>\n",
    "</body>\n",
    "</html>\n",
    "\"\"\"\n",
    "\n",
    "# --- Time Restriction (5–7 PM IST only) ---\n",
    "ist = pytz.timezone(\"Asia/Kolkata\")\n",
    "current_time = datetime.now(ist)\n",
    "\n",
    "if 17 <= current_time.hour < 19:\n",
    "    plot_iframe = f'<div class=\"plot-container\"><iframe src=\"{plot_filename}\"></iframe></div>'\n",
    "else:\n",
    "    plot_iframe = \"<h2 style='text-align:center;'>⏰ Graph available only between 5 PM – 7 PM IST</h2>\"\n",
    "\n",
    "final_html = dashboard_html.format(plot_iframe=plot_iframe)\n",
    "\n",
    "# Save dashboard\n",
    "dashboard_path = os.path.join(os.getcwd(), \"dashboard_bubble.html\")\n",
    "with open(dashboard_path, \"w\", encoding=\"utf-8\") as f:\n",
    "    f.write(final_html)\n",
    "\n",
    "# Open in browser\n",
    "webbrowser.open('file://' + os.path.realpath(dashboard_path))\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.13.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
